# Alternative Simple AppImage Build Verification (without Docker complications)
# 
# This workflow verifies that AppImage build scripts are generated correctly
# and that the build process starts without Docker conflicts

name: AppImage Build Verification

on:
  push:
    branches: [ main, 17-feat-add-worklow-to-build-appimage ]
  pull_request:
    branches: [ main, 17-feat-add-worklow-to-build-appimage ]
  workflow_dispatch:

jobs:
  verify-script-generation:
    name: V√©rifier la g√©n√©ration des scripts AppImage
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Make scripts executable
      run: |
        chmod +x ./app-image-builder.sh
        
    - name: Generate AppImage build scripts
      run: ./app-image-builder.sh
      
    - name: ‚úÖ Verify scripts were generated
      run: |
        echo "üîç V√©rification de la g√©n√©ration des scripts..."
        
        if [ ! -d "appimage-build-full" ]; then
          echo "‚ùå √âCHEC: Le dossier appimage-build-full n'existe pas!"
          exit 1
        fi
        
        if [ ! -f "appimage-build-full/build-in-docker-full.sh" ]; then
          echo "‚ùå √âCHEC: Le script build-in-docker-full.sh n'a pas √©t√© g√©n√©r√©!"
          exit 1
        fi
        
        if [ ! -f "appimage-build-full/Dockerfile" ]; then
          echo "‚ùå √âCHEC: Le Dockerfile n'a pas √©t√© g√©n√©r√©!"
          exit 1
        fi
        
        echo "‚úÖ SUCC√àS: Tous les scripts ont √©t√© g√©n√©r√©s!"
        echo "üìÇ Contenu du dossier appimage-build-full:"
        ls -la appimage-build-full/
        
  verify-appimage-build:
    name: V√©rifier la g√©n√©ration de l'AppImage
    runs-on: ubuntu-22.04
    needs: verify-script-generation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Docker
      run: |
        # Docker is pre-installed on GitHub Actions runners
        sudo systemctl start docker
        sudo systemctl enable docker
        # Verify Docker is working
        docker --version
        sudo docker info | grep "Server Version" || true
        
    - name: Make scripts executable
      run: |
        chmod +x ./app-image-builder.sh
        
    - name: Generate AppImage build scripts
      run: ./app-image-builder.sh
      
    - name: Build AppImage with Docker
      run: |
        cd appimage-build-full
        chmod +x ./build-in-docker-full.sh
        # Show the original script content
        echo "üìã Contenu original du script:"
        head -10 ./build-in-docker-full.sh
        # Modify the script to remove -it flags for CI environment
        sed -i 's/docker run -it/docker run/g' ./build-in-docker-full.sh
        # Also remove any standalone -it flags
        sed -i 's/ -it / /g' ./build-in-docker-full.sh
        # Add --privileged flag for FUSE support
        sed -i 's/docker run /docker run --privileged /g' ./build-in-docker-full.sh
        echo "üìã Contenu modifi√© du script:"
        head -10 ./build-in-docker-full.sh
        # Use sudo for Docker commands to avoid permission issues
        # Continue even if there are FUSE errors, as the AppImage might still be created
        sudo ./build-in-docker-full.sh || echo "‚ö†Ô∏è Build termin√© avec des avertissements (possibles erreurs FUSE)"
        
    - name: ‚úÖ Verify AppImage was created
      run: |
        echo "üîç V√©rification de la cr√©ation de l'AppImage..."
        
        # List all files in the build directory
        echo "üìÇ Contenu complet du dossier appimage-build-full:"
        ls -la appimage-build-full/
        
        # Look for any AppImage files
        echo "üîç Recherche de fichiers AppImage:"
        find appimage-build-full/ -name "*.AppImage" -type f || echo "Aucun fichier .AppImage trouv√©"
        
        # Check if the expected AppImage exists
        if [ ! -f "appimage-build-full/CoreTrace_Qt-1.0-x86_64.AppImage" ]; then
          echo "‚ùå √âCHEC: L'AppImage CoreTrace_Qt-1.0-x86_64.AppImage n'a pas √©t√© cr√©√©e!"
          
          # Try to find any AppImage with a different name
          APPIMAGE_FILE=$(find appimage-build-full/ -name "*.AppImage" -type f | head -1)
          if [ -n "$APPIMAGE_FILE" ]; then
            echo "‚úÖ Mais une autre AppImage a √©t√© trouv√©e: $APPIMAGE_FILE"
            # Copy it to the expected name for consistency
            cp "$APPIMAGE_FILE" "appimage-build-full/CoreTrace_Qt-1.0-x86_64.AppImage"
            echo "‚úÖ AppImage copi√©e vers le nom attendu"
          else
            echo "‚ùå Aucune AppImage trouv√©e du tout!"
            exit 1
          fi
        else
          echo "‚úÖ SUCC√àS: AppImage cr√©√©e avec succ√®s!"
        fi
        
    - name: üìä Display AppImage information
      run: |
        cd appimage-build-full
        echo "üìä Informations sur l'AppImage:"
        echo "üìÅ Nom: CoreTrace_Qt-1.0-x86_64.AppImage"
        echo "üìè Taille: $(du -h CoreTrace_Qt-1.0-x86_64.AppImage | cut -f1)"
        echo "üîç Type: $(file CoreTrace_Qt-1.0-x86_64.AppImage)"
        echo "‚úÖ Permissions: $(ls -la CoreTrace_Qt-1.0-x86_64.AppImage)"
        
    - name: üíæ Upload AppImage as artifact
      uses: actions/upload-artifact@v4
      with:
        name: CoreTrace-Qt-AppImage-${{ github.sha }}
        path: appimage-build-full/CoreTrace_Qt-1.0-x86_64.AppImage
        retention-days: 7